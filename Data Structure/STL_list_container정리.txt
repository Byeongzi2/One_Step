[C++] list container 정리

1. 노드 기반 컨테이너 (≒이중 연결 리스트)
2. <list> 헤더 파일 사용
	=> 기본 선언 ex) list<int> tmp;
3. list 컨테이너에는 at, []같은 접근 방식 無.
   iter값을 ++,-- 하는 방식으로만  원소에 접근이 가능하다.

<list의 함수>

• tmp.assign(2,8);		
: 8로 초기화된 2개의 원소 할당.

• tmp.front()		
: 맨 앞 원소를 반환.
• tmp.back()		
: 맨 뒤의 원소를 반환.

• tmp.begin()		
: 맨 앞의 원소를 가리키는 iter값을 반환.

• tmp.end()		
: list의 끝부분(맨 마지막 원소의 다음)의 iter값을 반환.

• tmp.rbegin()		
: list의 맨 마지막 원소를 가리키는 iter값 반환. 
list의 맨 마지막 원소부터 맨 앞 원소 까지 탐색할 때 사용. (tmp.begin()과 유사 / tmp.rend()와 주로 같이 사용 ) 

• tmp.rend()	
: list의 맨 마지막 원소부터 탐색했을 때 가리키는 list의 실제 첫 번째 원소 iter값.

• tmp.push_back(x)
: list의 뒤쪽으로 x값을 삽입.

• tmp.push_front(x)
: list의 앞쪽으로 x값을 삽입.

• tmp.pop_back()
: list의 맨 마지막 원소를 제거.

• tmp.pop_front()
: list의 첫 번째 원소를 제거

• tmp.insert(iter, x)
: iter값이 가리키는 자리에 원소 x 삽입.
삽입 이후 iter값이 기존에 가리키고 있던 밀려난 원소의 iter값으로 iter값 반환.

• tmp.erase(iter)
: iter가 가리키는 원소를 삭제.
삭제 이후 삭제한 원소의 다음 원소를 가리키는 iter값 반환.

• tmp.size()
: list에 들어있는 원소의 개수 반환.

• tmp.remove(x)
: list내에 x와 같은 원소를 모두 제거.

• tmp.remove_if( operator )
: operator 조건에 해당하는 리스트 내 원소들만 모두 제거.

=======================================================
사용 예시
#include <iostream>
#include <list>

// a predicate implemented as a function:
bool single_digit (const int& value) { return (value<10); }

// a predicate implemented as a class:
struct is_odd {
  bool operator() (const int& value) { return (value%2)==1; }
};

int main ()
{
  int myints[]= {15,36,7,17,20,39,4,1};
  std::list<int> mylist (myints,myints+8);   // 15 36 7 17 20 39 4 1

  mylist.remove_if (single_digit);           // 15 36 17 20 39
// single_digit함수만 호출하고 매개변수는 넣을 필요 X !!
  mylist.remove_if (is_odd());               // 36 20

  std::cout << "mylist contains:";
  for (std::list<int>::iterator it=mylist.begin(); it!=mylist.end(); ++it)
    std::cout << ' ' << *it;
  std::cout << '\n';

  return 0;
}
========================================================

• tmp.reverse()
: list내 원소들의 순서를 모두 뒤집는다.

• tmp.sort()
: list 내의 원소들을 오름차순으로 정렬 (오름차순이 default값.)

• tmp.swap(tmp2)
: list인 tmp와 tmp2를 바꾼다.

• tmp.splice(iter , tmp2)   // tmp.splice(주소값, list)
: tmp에서 iter값이 가리키는 곳에 tmp2 내의 모든 원소들을 잘라서 이어 붙여 넣는다.
• tmp.splice(iter, tmp2, iter2) 	 //tmp.splice(tmp의 주소값, 원소를 가져올 list, 원소 가져올 list 내부중 한 주소값)
: tmp에 있는 iter값이 가리키는 곳에 tmp2 내의 iter2값이 가리키는 원소를 넣는다.
• tmp.splice(iter, tmp2, iter_start, iter_end)
: tmp에 있는 iter값이 가리키는 곳에 tmp2 내의 iter_start 주소부터 iter_end가 가리키는 주소 내에 있는 모든 원소를 삽입.

• tmp.unique()
: 양 옆의 원소가 같다면 유일한 한 원소만 제외하고 중복 원소는 모두 삭제

• tmp.merge(tmp2)
: tmp2를 tmp의 내부로 오름차순 기준으로 정렬하여 삽입.